# -*- coding: utf-8 -*-
"""option pricing: MC and BSM with user's inputs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uFiStody1hUmt3T28JeVvbVNEtGZ5PHr
"""

"""BSM and Monte Carlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GxOmIp-Eixv22HaeN1nVn5y7Ps2-kEj

#Black and Scholes for Option Pricing

"""

import numpy as np
from scipy.stats import norm

#We set up the well known formula of Black-Scholes for option pricing:
def BSM(St, K, T, r, sigma, OPT):
  d1 = (np.log(St/K)+(r + 0.5*sigma**2)*T)/(np.sqrt(T) * sigma)
  d2 = d1 - sigma * np.sqrt(T)
  if OPT == "call":
    price = St*norm.cdf(d1) - K*np.exp(-r*T) * norm.cdf(d2)
  else:
    price = -St*norm.cdf(-d1)+K*np.exp(-r*T) * norm.cdf(-d2)
  return price

def monte_carlo_option_pricing(S0, K, T, r, sigma, N, option_type="call"):
    # Generate random numbers Z (random shock)
    Z = np.random.standard_normal(N)

    # Simulate ST prices using geometric Brownian motion
    ST = S0 * np.exp((r - 0.5 * sigma**2) * T + sigma * Z * np.sqrt(T))

    # Calculate payoff
    if option_type == "call":
        payoff = np.maximum(0, ST - K)
    elif option_type == "put":
        payoff = np.maximum(0, K - ST)

    # Option price: discounted mean of payoffs
    option_price = np.exp(-r * T) * np.mean(payoff)

    return option_price


#S0 = 100  # Initial stock price
#K = 105   # Strike price
#T = 1     # Time to maturity
#r = 0.04  # Risk-free rate
#sigma = 0.2  # Volatility
#N = 100000  # Number of simulations

# Call option price
#call_price = monte_carlo_option_pricing(S0, K, T, r, sigma, N, option_type)
#print(f"Call option price: {call_price}")

# Put option price
#put_price = monte_carlo_option_pricing(S0, K, T, r, sigma, N)
#print(f"Put option price: {put_price}")


if __name__ == "__main__":
# Ask the user for the option type
    option_type = input("Would you like to evaluate a 'put' or a 'call' option? ").strip().lower()

    simulation_type = input("How? Montecarlo o BS?").strip().lower()

    S0 = int(input("stock price ?").strip().lower())
    K = int(input("stike price ").strip().lower())
    T = int(input("maturity ").strip().lower())
    r = float(input("Risk-free rate ").strip().lower())
    sigma = float(input("Volatility ").strip().lower())

    print(simulation_type)

    if simulation_type == "montecarlo":
        N = int(input("Number of simulation").strip().lower())

        call_price = monte_carlo_option_pricing(S0, K, T, r, sigma, N, option_type)
        print(f"Call option price: {call_price}")

        # Check user input and calculate the option price

    elif simulation_type == "bs":
        if option_type in ["put", "call"]:
            price = BSM(S0, K, T, r, sigma, option_type)
            print(f"The price of the {option_type} option is: {price: }")

    else:
        print("something wrong")