# -*- coding: utf-8 -*-
"""Integrated Library Management Solution .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YjYSuRfe2wuBQ0rXd9fOXnmunpzXD5qB
"""

#Library Management Solution

#Set up a dictionary to store the books and their respective number of copies
library = {}

#Create a function to add a book to the library
def add_book(title, copies):
    if title in library:
        library[title] += copies
        print(f"Updated: {copies} copies added to '{title}'.")
    else:
        library[title] = copies
        print(f"Added: '{title}' with {copies} copies.")

#Create a function to remove a book from the library
def remove_book(title):
    if title in library:
        del library[title]
        print(f"Removed: '{title}'.")
    else:
        print(f"Error: The book '{title}' does not exist.")

#Create a function to check if a book is available in the library
def check_availability(title):
    return library.get(title, 0) > 0

#Create a function to borrow a book from the library
def borrow_book(title):
    if title in library and library[title] > 0:
        library[title] -= 1
        print(f"Borrowed: one copy of '{title}' has been borrowed.")
    else:
        print(f"Error: '{title}' is not available for borrowing.")

#Create a function to restore (add) copies of a book in the library
def restore_book(title, copies):
    if title in library:
        library[title] += copies
        print(f"Restored: {copies} copies added to '{title}'.")
    else:
        print(f"Error: The book '{title}' does not exist.")

#Create a function to calculate and display library statistics
def library_statistics():
    total_books = len(library)
    total_copies = sum(library.values())
    average_copies = total_copies / total_books if total_books > 0 else 0
    return {
        "total_books": total_books,
        "total_copies": total_copies,
        "average_copies": average_copies
    }

#Create a function to display all books and their number of copies
def display_books():
    if library:
        print("Book list:")
        for title, copies in library.items():
            print(f"- {title}: {copies} copies")
    else:
        print("The library is empty.")

#Create a loop for user interaction
def main():
  while True:
    print("\nOptions:")
    print("1. Add a book")
    print("2. Remove a book")
    print("3. Check book availability")
    print("4. Borrow a book")
    print("5. Restore a book")
    print("6. Library statistics")
    print("7. Display books")
    print("8. Exit")

#Ask the user an option
    choice = input("Select an option (1-8): ")

#With if statements handle each option based on user input
    if choice == "1":
        title = input("Enter the book title: ")
        copies = int(input("Enter the number of copies: "))
        add_book(title, copies)
    elif choice == "2":
        title = input("Enter the title of the book to remove: ")
        remove_book(title)
    elif choice == "3":
        title = input("Enter the title of the book to check: ")
        available = check_availability(title)
        print(f"Available: {available}")
    elif choice == "4":
        title = input("Enter the title of the book to borrow: ")
        borrow_book(title)
    elif choice == "5":
        title = input("Enter the title of the book to restore: ")
        copies = int(input("Enter the number of copies to add: "))
        restore_book(title, copies)
    elif choice == "6":
        stats = library_statistics()
        print("Library statistics:")
        print(f"- Total books: {stats['total_books']}")
        print(f"- Total copies: {stats['total_copies']}")
        print(f"- Average copies: {stats['average_copies']:.2f}")
    elif choice == "7":
        display_books()
    elif choice == "8":
        print("Exiting the program.")
        break
    else:
        print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()